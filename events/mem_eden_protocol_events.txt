namespace = mem_eden_protocol
# fired at gamestart to setup the habitat

country_event = {
	id = mem_eden_protocol.1000
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_origin = origin_mem_eden_protocol
	}
	immediate = {
		leader = {
			add_trait = leader_trait_legendary_mem_eden_protocol
		}
	}
}

country_event = {
	id = mem_eden_protocol.1
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_origin = origin_mem_eden_protocol
	}
	immediate = {
		leader = {
			add_trait = leader_trait_legendary_mem_eden_protocol
		}
		save_global_event_target_as = mem_eden_protocol_country
		set_country_flag = encountered_first_primitive
		set_policy = {
			policy = interference
			option = interference_subtle
		}
		set_policy_cooldown = interference
		set_policy = {
			policy = enlightenment
			option = enlightenment_not_allowed
		}
		set_policy_cooldown = enlightenment
		start_situation = {
			type = situation_mem_eden_protocol_protocolswill
		}
		capital_scope = {
			remove_all_buildings = yes
			remove_all_districts = yes
			add_district = district_hab_mining
			add_district = district_hab_energy
			add_district = district_hab_energy
			add_district = district_hab_science
			add_district = district_hab_industrial
			add_district = district_hab_housing
			add_district = district_hab_housing
			add_building = building_hab_major_capital
			add_building = building_machine_assembly_plant
			add_building = building_mem_eden_protocol_terraformer_1
			add_building = building_mem_eden_protocol_seeder_1
			set_variable = {
				which = mem_eden_protocol_caretaker_variable
				value = 1
			}
			while = {
				count = 2
				closest_system = {
					limit = {
						OR = {
							has_star_flag = neighbor_t1_first_colony
							has_star_flag = neighbor_t2_second_colony
						}
						NOT = {
							any_system_planet = {
								has_planet_flag = mem_eden_protocol_terraforming_candidate
							}
						}
					}
					random_system_planet = {
						limit = {
							has_planet_flag = prescripted_ideal
						}
						clear_deposits = yes
						change_pc = pc_barren
						add_modifier = {
							modifier = terraforming_candidate
						}
						set_planet_flag = mem_eden_protocol_terraforming_candidate
					}
					if = {
						limit = {
							NOT = {
								any_system_planet = {
									has_planet_flag = mem_eden_protocol_terraforming_candidate
								}
							}
						}
						random_system_planet = {
							limit = {
								is_star = no
								planet_size > 8
								planet_size < 26
							}
							clear_deposits = yes
							clear_planet_modifiers = yes
							change_pc = pc_barren
							add_modifier = {
								modifier = terraforming_candidate
							}
							set_planet_flag = mem_eden_protocol_terraforming_candidate
						}
					}
				}
			}
			solar_system = {
				starbase = {
					remove_starbase_building = {
						building = hydroponics_bay
					}
					set_starbase_building = {
						slot = 1
						building = crew_quarters
					}
				}
			}
			#	solar_system = {
			#		random_system_planet = {
			#			limit = {
			#				exists = owner
			#				owner = {
			#					is_country_type = primitive
			#				}
			#			}
			#			# I fail to find a way to spawn an observation station
			#		}
			#	}
		}
	}
}

#test for yearly pulse event
country_event = {
	id = mem_eden_protocol.2
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_origin = origin_mem_eden_protocol
	}
	immediate = {
		if = {
			limit = {
				NOT = {
					has_country_flag = mem_eden_protocol_changed_direction
				}
			}
			set_policy_cooldown = interference
			set_policy_cooldown = enlightenment
		}
		set_variable = {
			which = mem_eden_protocol_cared_primitives_number_country
			value = 0
		}
		every_owned_planet = {
			limit = {
				is_planet_class = pc_habitat
			}
			if = {
				limit = {
					owner = {
						NOT = {
							has_country_flag = mem_eden_protocol_seeding_pause
						}
					}
					OR = {
						has_building = building_mem_eden_protocol_seeder_1
						has_building = building_mem_eden_protocol_seeder_2
						has_building = building_mem_eden_protocol_seeder_3
					}
					solar_system = {
						any_system_planet = {
							habitable_planet_not_urban = yes
							NOT = {
								exists = owner
							}
						}
					}
				}
				random_list = {
					80 = {
					}
					20 = {
						solar_system = {
							random_system_planet = {
								limit = {
									habitable_planet_not_urban = yes
									NOT = {
										exists = owner
									}
								}
								generate_very_early_pre_ftls_on_planet = yes
							}
						}
						owner = {
							set_timed_country_flag = {
								flag = mem_eden_protocol_seeding_pause
								years = 2
							}
							# give notification
						}
					}
				}
				reroll_random = yes
			}
			if = {
				limit = {
					OR = {
						has_building = building_mem_eden_protocol_seeder_1
						has_building = building_mem_eden_protocol_seeder_2
						has_building = building_mem_eden_protocol_seeder_3
					}
					solar_system = {
						any_system_planet = {
							exists = owner
							owner = {
								is_country_type = primitive
								OR = {
									has_country_flag = machine_age
									has_country_flag = atomic_age
									has_country_flag = early_space_age
								}
							}
						}
					}
				}
				solar_system = {
					every_system_planet = {
						limit = {
							exists = owner
							owner = {
								is_country_type = primitive
								OR = {
									has_country_flag = machine_age
									has_country_flag = atomic_age
									has_country_flag = early_space_age
								}
							}
						}
						owner = {
							random_situation = {
								limit = {
									is_situation_type = pre_ftl_tech_progress_situation
								}
								set_situation_flag = tech_frozen
							}
						}
					}
				}
			}
			if = {
				limit = {
					owner = {
						NOT = {
							has_country_flag = mem_eden_protocol_terraforming_pause
						}
					}
					OR = {
						has_building = building_mem_eden_protocol_terraformer_1
						has_building = building_mem_eden_protocol_terraformer_2
					}
					solar_system = {
						any_system_planet = {
							OR = {
								has_modifier = terraforming_candidate
								is_planet_class = pc_nuked
							}
							OR = {
								NOT = {
									exists = owner
								}
								owner = {
									is_country_type = primitive
								}
							}
						}
					}
				}
				random_list = {
					90 = {
					}
					10 = {
						solar_system = {
							random_system_planet = {
								limit = {
									OR = {
										has_modifier = terraforming_candidate
										is_planet_class = pc_nuked
									}
									OR = {
										NOT = {
											exists = owner
										}
										owner = {
											is_country_type = primitive
										}
									}
								}
								change_pc = rl_habitable_normal
								reroll_planet = yes
							}
						}
						owner = {
							set_timed_country_flag = {
								flag = mem_eden_protocol_terraforming_pause
								years = 3
							}
							# give notification
						}
					}
				}
				reroll_random = yes
			}
			if = {
				limit = {
					owner = {
						NOT = {
							has_country_flag = mem_eden_protocol_terraforming_pause
						}
					}
					has_building = building_mem_eden_protocol_terraformer_2
					solar_system = {
						any_system_planet = {
							has_modifier = toxic_terraforming_candidate
						}
					}
				}
				random_list = {
					90 = {
					}
					10 = {
						solar_system = {
							random_system_planet = {
								limit = {
									has_modifier = toxic_terraforming_candidate
								}
								change_pc = rl_habitable_normal
							}
						}
						owner = {
							set_timed_country_flag = {
								flag = mem_eden_protocol_terraforming_pause
								years = 3
							}
							# give notification
						}
					}
				}
				reroll_random = yes
			}
			if = {
				limit = {
					owner = {
						NOT = {
							has_country_flag = mem_eden_protocol_terraforming_pause
						}
					}
					has_building = building_mem_eden_protocol_terraformer_2
					solar_system = {
						any_system_planet = {
							habitable_planet_not_urban = yes
							NOT = {
								is_planet_class = pc_gaia
							}
							OR = {
								NOT = {
									exists = owner
								}
								owner = {
									is_country_type = primitive
								}
							}
						}
					}
				}
				random_list = {
					90 = {
					}
					10 = {
						solar_system = {
							random_system_planet = {
								limit = {
									habitable_planet_not_urban = yes
									NOT = {
										is_planet_class = pc_gaia
									}
									OR = {
										NOT = {
											exists = owner
										}
										owner = {
											is_country_type = primitive
										}
									}
								}
								change_pc = pc_gaia
							}
						}
						owner = {
							set_timed_country_flag = {
								flag = mem_eden_protocol_terraforming_pause
								years = 3
							}
							# give notification
						}
					}
				}
				reroll_random = yes
			}
			save_event_target_as = mem_eden_protocol_habitat
			set_variable = {
				which = mem_eden_protocol_caretaker_variable
				value = 0
			}
			solar_system = {
				every_system_colony = {
					limit = {
						exists = owner
						owner = {
							is_country_type = primitive
						}
					}
					event_target:mem_eden_protocol_habitat = {
						change_variable = {
							which = mem_eden_protocol_caretaker_variable
							value = 1
						}
					}					
				}
			}			
			owner = {
				change_variable = {
					which = mem_eden_protocol_cared_primitives_number_country
					value = event_target:mem_eden_protocol_habitat.mem_eden_protocol_caretaker_variable
				}
			}
		}
		if = {
			limit = {
				check_variable = {
					which = mem_eden_protocol_cared_primitives_number_country
					value > 25
				}
			}
			set_variable = {
				which = mem_eden_protocol_cared_primitives_number_country
				value = 25
			}
		}
	}
}

## situation events 
### TODO: sounds 101-114, new finishing event for digsite (leader screen and holgram), make dummy event chain and assign subtitles for events
situation_event = {
	# dummy event for fast situation
	id = mem_eden_protocol.100
	title = "mem_eden_protocol.101.name"
	picture = GFX_evt_habitat
	is_triggered_only = yes
	desc = "mem_eden_protocol.101.desc"
	trigger = {
		always = yes
	}
	option = {
		name = mem_eden_protocol.101.a
		add_situation_progress = 100
	}
	option = {
		name = mem_eden_protocol.101.a
		add_situation_progress = 200
	}
	option = {
		name = mem_eden_protocol.101.a
		add_situation_progress = 300
	}
	option = {
		name = mem_eden_protocol.101.a
		add_situation_progress = 400
	}
	option = {
		name = mem_eden_protocol.101.a
		add_situation_progress = 500
	}
}

situation_event = {
	id = mem_eden_protocol.101
	title = "mem_eden_protocol.101.name"
	picture = GFX_evt_sapient_AI
	is_triggered_only = yes
	desc = "mem_eden_protocol.101.desc"
	trigger = {
		always = yes
	}
	#event_chain = mem_eden_protocol
	option = {
		# habitat building slots
		name = mem_eden_protocol.101.a
		owner = {
			add_modifier = {
				modifier = mem_eden_protocol_habitat_building_slots
			}
		}	
			
	}
	option = {
		# habitat housing
		name = mem_eden_protocol.101.b
		owner = {
			add_modifier = {
				modifier = mem_eden_protocol_habitat_housing
			}
		}
	}
	option = {
		# unity
		name = mem_eden_protocol.101.c
		owner = {
			add_monthly_resource_mult = {
				resource = unity
				value = 12
			}
		}
	}
}

situation_event = {
	id = mem_eden_protocol.103
	title = "mem_eden_protocol.103.name"
	picture = GFX_evt_communication_event
	is_triggered_only = yes
	desc = "mem_eden_protocol.103.desc"
	trigger = {
		always = yes
	}
	option = {
		# uncover arc site
		name = mem_eden_protocol.103.a
		owner = {
			home_planet = {
				solar_system = {
					random_system_planet = {
						limit = {
							has_planet_flag = mem_eden_protocol_old_homeworld
						}
						create_archaeological_site = mem_eden_protocol_devolve_relic_digsite
					}
				}
			}
		}
	}
}

situation_event = {
	id = mem_eden_protocol.102
	title = "mem_eden_protocol.102.name"
	picture = GFX_evt_robot_assembly_plant
	is_triggered_only = yes
	desc = "mem_eden_protocol.102.desc"
	trigger = {
		always = yes
	}
	option = {
		# habitat district slots
		name = mem_eden_protocol.102.a
		owner = {
			add_modifier = {
				modifier = mem_eden_protocol_habitat_districts
			}
		}
	}
	option = {
		# habitat jobs per district
		name = mem_eden_protocol.102.b
		owner = {
			add_modifier = {
				modifier = mem_eden_protocol_habitat_jobs
			}
		}
	}
	option = {
		name = mem_eden_protocol.102.c
		owner = {
			add_monthly_resource_mult = {
				resource = unity
				value = 18
			}
		}
	}
}

situation_event = {
	id = mem_eden_protocol.104
	title = "mem_eden_protocol.104.name"
	picture = GFX_evt_habitat
	is_triggered_only = yes
	desc = "mem_eden_protocol.104.desc"
	trigger = {
		always = yes
	}
	option = {
		# flat empire size from caretakers
		name = mem_eden_protocol.104.a
		owner = {
			custom_tooltip = mem_eden_protocol.104.a.tt
			hidden_effect = {
				owner = {
					set_country_flag = mem_eden_protocol_empire_size_per_job
				}
			}
		}
	}
	option = {
		# research speed
		name = mem_eden_protocol.104.b
		owner = {
			add_modifier = {
				modifier = mem_eden_protocol_research
			}
		}
	}
}

situation_event = {
	id = mem_eden_protocol.105
	title = "mem_eden_protocol.105.name"
	picture = GFX_evt_synth_organic_relations
	is_triggered_only = yes
	desc = "mem_eden_protocol.105.desc"
	trigger = {
		always = yes
	}
	option = {
		# stay caretaker
		name = mem_eden_protocol.105.a
		
		owner = {
			add_modifier = {
				modifier = mem_eden_protocol_civic_point
			}
			custom_tooltip = mem_eden_protocol.105.a.tt			# unlock gaia forming and final building tier, pre ftl boost unity, get full machine world bonus from building
			hidden_effect = {
				owner = {
					set_country_flag = mem_eden_protocol_stayed_caretaker
					set_country_flag = mem_eden_protocol_seeder_3_allowed
				}
			}
		}
	}
	option = {
		# become rouge servitor
		name = mem_eden_protocol.105.b
		owner = {
			add_modifier = {
				modifier = mem_eden_protocol_civic_point
			}
			force_add_civic = civic_machine_servitor
			custom_tooltip = mem_eden_protocol.105.b.tt			# periodic pops, caretaker produce consumer goods
		}
	}
	option = {
		# become assimilator
		name = mem_eden_protocol.105.c
		owner = {
			add_modifier = {
				modifier = mem_eden_protocol_civic_point
			}
			force_add_civic = civic_machine_assimilator
			custom_tooltip = mem_eden_protocol.105.c.tt			# caretaker boost cybernetic pops, building can be build everywhere, invade all pre-ftl
			set_policy = {
				policy = interference
				option = interference_aggressive
			}
			set_policy_cooldown = interference
			hidden_effect = {
				owner = {
					every_owned_planet = {
						limit = {
							OR = {
								has_building = building_mem_eden_protocol_seeder_1
								has_building = building_mem_eden_protocol_seeder_2
								has_building = building_mem_eden_protocol_seeder_3
								has_building = building_mem_eden_protocol_terraformer_1
							}
						}
						if = {
							limit = {
								has_building = building_mem_eden_protocol_seeder_1
							}
							remove_building = building_mem_eden_protocol_seeder_1
							add_building = building_mem_eden_protocol_da_organicbooster_1
						}
						else_if = {
							limit = {
								has_building = building_mem_eden_protocol_seeder_2
							}
							remove_building = building_mem_eden_protocol_seeder_2
							add_building = building_mem_eden_protocol_da_organicbooster_2
						}
						else_if = {
							limit = {
								has_building = building_mem_eden_protocol_seeder_3
							}
							remove_building = building_mem_eden_protocol_seeder_3
							add_building = building_mem_eden_protocol_da_organicbooster_2
						}
						if = {
							limit = {
								has_building = building_mem_eden_protocol_terraformer_1
							}
							remove_building = building_mem_eden_protocol_terraformer_1
						}
					}
					every_pre_ftl_within_border = {
						establish_communications = root.owner
						owner = {
							set_country_flag = pre_ftl_being_invaded
							save_event_target_as = contact_empire
							set_country_flag = first_contact_completed@root.owner
							set_awareness = 100
						}
						root.owner = {
							set_country_flag = first_contact_completed@event_target:contact_empire
							country_event = {
								id = action.2
							}
						}
						set_hostile = root.owner
						country_event = {
							#invade little later, immediate wont trigger ground combat
							id = mem_eden_protocol.106
							days = 30
						}
						#capital_scope = {
						#	while = {
						#		count = 3
						#		create_army = {
						#			name = random
						#			owner = root.owner
						#			species = root.owner_main_species
						#			type = "machine_assault_2"
						#		}
						#	}
						#}
					}
				}
			}
		}
	}
	after = {
		destroy_situation = this
	}
}

country_event = {
	# invade them
	id = mem_eden_protocol.106
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		capital_scope = {
			while = {
				count = 3
				create_army = {
					name = random
					owner = this.solar_system.owner
					species = this.solar_system.owner.owner_main_species
					type = "machine_assault_2"
				}
			}
		}
	}
}

# create pre-ftl via bombing | Fired by on_planet_bombarded
# This = Planet
# From = Bombarder
planet_event = {
	id = mem_eden_protocol.107
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_orbital_bombardment_stance = mem_eden_protocol_devolve
		planet_devastation = 100
		NOT = {
			owner = {
				is_country_type = primitive
			}
		}
	}
	immediate = {
		# this is so scuffed but works xd, edit: this gets even worse the longer i think about it
		
		if = {
			limit = {
				root.owner = {
					is_hive_empire = yes
				}
			}
			create_pre_ftl_hive_empire = yes
		}
		else = {
			create_pre_ftl_empire = yes
		}
		
		last_created_country = {
			establish_communications = root.owner
			establish_communications = from
			set_pre_ftl_age = industrial_age
			if = {
				limit = {
					NOT = {
						any_situation = {
							is_situation_type = pre_ftl_tech_progress_situation
						}
					}
				}
				start_situation = {
					type = pre_ftl_tech_progress_situation
				}
			}
			random_situation = {
				limit = {
					is_situation_type = pre_ftl_tech_progress_situation
				}
				set_situation_flag = tech_frozen
			}
			root = {
				set_owner = prev
				add_building = building_mem_eden_protocol_scrap_miner_base
			}
			random_owned_pop = {
				limit = {
					can_think = yes
				}
				owner = {
					change_dominant_species = {
						species = PREV
					}
				}
			}
		}
		from = {
			create_message = {
				type = MESSAGE_MEM_MADE_PRIMITIVE
				localization = MESSAGE_MEM_MADE_PRIMITIVE
				days = 30
				target = root
				#variable = {
				#	type = name
				#	localization = PLANET
				#	scope = this
				#}
			}
		}
	}
}

# devolve_relic arc site events
fleet_event = {
	id = mem_eden_protocol.111
	title = "mem_eden_protocol.111.name"
	desc = "mem_eden_protocol.111.desc"
	picture = GFX_evt_toxic
	show_sound = event_dig_site
	archaeology = yes
	is_triggered_only = yes
	immediate = {
		from = {
			set_site_progress_locked = yes
		}
	}
	after = {
		from = {
			set_site_progress_locked = no
		}
	}
	option = {
		name = mem_eden_protocol.111.a
		owner = {
			add_monthly_resource_mult = {
				resource = engineering_research
				value = @tier3researchreward
				min = @tier3researchmin
				max = @tier3researchmax
			}
		}
	}
}

fleet_event = {
	id = mem_eden_protocol.112
	title = "mem_eden_protocol.112.name"
	desc = "mem_eden_protocol.112.desc"
	picture = GFX_evt_underground_civilization
	show_sound = event_dig_site
	archaeology = yes
	is_triggered_only = yes
	immediate = {
		from = {
			set_site_progress_locked = yes
		}
	}
	after = {
		from = {
			set_site_progress_locked = no
		}
	}
	option = {
		name = mem_eden_protocol.112.a
		owner = {
			add_monthly_resource_mult = {
				resource = society_research
				value = @tier3researchreward
				min = @tier3researchmin
				max = @tier3researchmax
			}
		}
	}
}

fleet_event = {
	id = mem_eden_protocol.113
	title = "mem_eden_protocol.113.name"
	desc = "mem_eden_protocol.113.desc"
	picture = GFX_evt_underground_city
	show_sound = event_dig_site
	archaeology = yes
	is_triggered_only = yes
	immediate = {
		from = {
			set_site_progress_locked = yes
		}
	}
	after = {
		from = {
			set_site_progress_locked = no
		}
	}
	option = {
		name = mem_eden_protocol.113.a
		owner = {
			add_monthly_resource_mult = {
				resource = physics_research
				value = @tier3researchreward
				min = @tier3researchmin
				max = @tier3researchmax
			}
		}
	}
}

fleet_event = {
	id = mem_eden_protocol.114
	title = "mem_eden_protocol.114.name"
	desc = "mem_eden_protocol.114.desc"
	picture = GFX_evt_glitchy_matrix
	show_sound = event_dig_site
	archaeology = yes
	is_triggered_only = yes
	immediate = {
		from = {
			set_site_progress_locked = yes
		}
	}
	after = {
		from = {
			set_site_progress_locked = no
		}
	}
	option = {
		name = mem_eden_protocol.114.a
		owner = {
			add_relic = r_mem_eden_protocol_devolve_relic
		}
	}
}

# on action get primitive to pamper
planet_event = {
	id = mem_eden_protocol.121
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		OR = {
			has_building = building_mem_eden_protocol_seeder_1
			has_building = building_mem_eden_protocol_seeder_2
			has_building = building_mem_eden_protocol_seeder_3
		}
		exists = owner
		owner = {
			has_origin = origin_mem_eden_protocol
			has_valid_civic = civic_machine_servitor
		}
	}
	immediate = {
		solar_system = {
			random_system_planet = {
				limit = {
					habitable_planet_not_urban = yes
					OR = {
						NOT = {
							exists = owner
						}
						AND = {
							exists = owner
							owner = {
								is_country_type = primitive
							}
						}
					}
				}
				owner = {
					random_owned_pop = {
						save_event_target_as = mem_primitive_target
					}
				}
			}
		}
		create_pop = {
			species = mem_primitive_target
		}
		create_message = {
			type = MESSAGE_MEM_GOT_PRIMITIVE
			localization = MESSAGE_MEM_GOT_PRIMITIVE
			days = 30
			target = this
			variable = {
				type = name
				localization = PLANET
				scope = this
			}
		}
	}
}
